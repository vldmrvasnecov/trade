# main.py
import asyncio
import pandas as pd
import time
import ccxt
import logging
import signal
import sys
from datetime import datetime
from config import (MAX_CONCURRENT_REQUESTS, ALT_COINS, BTC_USDT, BTC_TIMEFRAMES, ALT_TIMEFRAMES,
                    Colors, TELEGRAM_ENABLED, TELEGRAM_TOKEN, CHAT_ID, BTC_CACHE_TTL)
from cache import BTCCache
from data_collector import fetch_ohlcv_async, fetch_orderbook_async
from signal_analyzer import analyze_btc_data, analyze_altcoin_data, combine_signals
from notifier import send_telegram_alert_enhanced
from market_data import fetch_top_altcoins

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–±–æ—Ç—ã
running = True

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    global running
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    running = False

def run_triad_scan():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏"""
    logger.warning("–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º.")
    return None

async def run_triad_scan_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –≤—Å–µ—Ö –º–æ–Ω–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ —Å–µ–º–∞—Ñ–æ—Ä—É"""
    global running
    if not running:
        return None
        
    # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –≤–Ω—É—Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop
    semaphore = asyncio.Semaphore(MAX_CONCURRENT_REQUESTS)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à BTC
    btc_cache = BTCCache(BTC_CACHE_TTL)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π exchange –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    exchange_sync = ccxt.binance({
        'rateLimit': 1000,
        'enableRateLimit': True,
    })

    logger.info("‚ú®" * 60)
    logger.info("       –ú–£–õ–¨–¢–ò-–ò–ù–î–ò–ö–ê–¢–û–†–ù–´–ô –ë–û–¢ v6: –ò–ï–†–ê–†–•–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó")
    logger.info("       BTC/USDT -> ALT/USDT | Z | RSI | MACD | StochRSI | Volume | Volatility | R/R")
    logger.info("‚ú®" * 60)

    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤ –ø–æ –æ–±—ä–µ–º—É...")
        alt_coins_list = await fetch_top_altcoins(limit=15, exclude_stables=True) # –ü–æ–ª—É—á–∞–µ–º 15 –º–æ–Ω–µ—Ç
        if not alt_coins_list:
             logger.warning("–°–ø–∏—Å–æ–∫ —Ç–æ–ø –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤ –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
             alt_coins_list = ALT_COINS # fallback –Ω–∞ –∫–æ–Ω—Ñ–∏–≥
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
        alt_coins_list = ALT_COINS # fallback –Ω–∞ –∫–æ–Ω—Ñ–∏–≥
    logger.info(f"–ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –¥–ª—è: {alt_coins_list}")

    # 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTC/USDT
    logger.info("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BTC/USDT...")
    btc_dfs = {}
    tasks = []
    
    for tf_name, tf in BTC_TIMEFRAMES:
        task = fetch_ohlcv_async(BTC_USDT, tf, max(20 + 50, 200 + 50), sem=semaphore)
        tasks.append((tf_name, task))

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        task_results = await asyncio.wait_for(
            asyncio.gather(*[task for _, task in tasks], return_exceptions=True),
            timeout=300.0
        )
    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö BTC/USDT")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö BTC/USDT: {e}")
        return None

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    successful_btc_data = 0
    for i, (tf_name, _) in enumerate(tasks):
        if not running:
            return None
            
        result = task_results[i]
        if isinstance(result, Exception):
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BTC/USDT {tf_name}: {result}")
            continue
        if result is None or len(result) < 10:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BTC/USDT {tf_name}")
            continue
        btc_dfs[tf_name] = result
        successful_btc_data += 1

    if successful_btc_data == 0:
        logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ BTC")
        return None

    # 2. –ó–∞—Ç–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º BTC
    try:
        btc_signal = analyze_btc_data(btc_dfs, btc_cache)
        if not btc_signal:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ BTC. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞.")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ BTC: {e}")
        return None

    logger.info(f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç BTC: {btc_signal.get('trend', 'N/A').upper()} | "
                f"{btc_signal.get('regime', 'N/A')} | {btc_signal.get('volatility', 'N/A')}")
    logger.info(f"  Z-score: {btc_signal.get('z', 0):.2f} | "
                f"RSI: {btc_signal.get('rsi', 50):.1f} | "
                f"MACD: {btc_signal.get('macd_hist', 0):.3f}")
    logger.info(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {btc_signal.get('confidence', 'LOW').upper()}")

    # 3. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤
    logger.info("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤...")
    all_results = []
    alt_tasks = []
    
    for alt_symbol in alt_coins_list:
        if not running:
            return None
        alt_tasks.append(analyze_altcoin_task(alt_symbol, ALT_TIMEFRAMES, semaphore, btc_signal, exchange_sync))

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    try:
        alt_results = await asyncio.wait_for(
            asyncio.gather(*alt_tasks, return_exceptions=True),
            timeout=300.0  # 5 –º–∏–Ω—É—Ç –Ω–∞ –≤—Å–µ –∞–ª—å—Ç–∫–æ–∏–Ω—ã
        )
    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤: {e}")
        return None

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    successful_analyses = 0
    failed_analyses = 0
    
    for i, result in enumerate(alt_results):
        if not running:
            return None
            
        if isinstance(result, Exception):
            failed_analyses += 1
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {ALT_COINS[i]}: {result}")
            continue
        if result is not None:
            successful_analyses += 1
            all_results.append(result)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            try:
                send_telegram_alert_enhanced(result)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {ALT_COINS[i]}: {e}")
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
            try:
                alt = result['alt']
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
                rr_val = alt.get('rr')
                target_val = alt.get('target')
                stop_val = alt.get('stop')
                rr_str = f"{rr_val:.2f}" if rr_val is not None else "N/A"
                target_str = f"{target_val:.8f}" if target_val is not None else "N/A"
                stop_str = f"{stop_val:.8f}" if stop_val is not None else "N/A"
                
                logger.info(f"\nüîç {alt.get('symbol', 'N/A')}")
                logger.info(f"  –°–∏–≥–Ω–∞–ª –∞–ª—å—Ç–∫–æ–∏–Ω–∞: {alt.get('signal', 'N/A')} ({alt.get('confidence', 'LOW').upper()})")
                logger.info(f"  –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {result.get('final_signal', 'N/A')} ({result.get('confidence', 'LOW').upper()})")
                logger.info(f"  –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å BTC: {result.get('correlation', 0):.2f}")
                logger.info(f"  –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: {'–î–∞' if result.get('is_divergent', False) else '–ù–µ—Ç'}")
                logger.info(f"  –ü—Ä–∏—á–∏–Ω–∞: {result.get('reason', 'N/A')}")
                logger.info(f"  R/R: {rr_str} | –¶–µ–ª—å: {target_str} | –°—Ç–æ–ø: {stop_str}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {ALT_COINS[i]}: {e}")

    logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —É—Å–ø–µ—à–Ω–æ {successful_analyses}, –æ—à–∏–±–æ–∫ {failed_analyses}, –≤—Å–µ–≥–æ {len(ALT_COINS)}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if all_results:
        try:
            df_data = []
            for res in all_results:
                try:
                    alt = res.get('alt', {})
                    btc = res.get('btc', {})
                    
                    df_data.append({
                        'alt': alt.get('symbol', 'N/A'),
                        'final_signal': res.get('final_signal', 'N/A'),
                        'alt_signal': alt.get('signal', 'N/A'),
                        'confidence': res.get('confidence', 'low'),
                        'btc_trend': btc.get('trend', 'neutral'),
                        'btc_regime': btc.get('regime', 'N/A'),
                        'correlation': res.get('correlation', 0),
                        'is_divergent': res.get('is_divergent', False),
                        'reason': res.get('reason', 'N/A'),
                        'rr': alt.get('rr'),
                        'target': alt.get('target'),
                        'stop': alt.get('stop'),
                        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    })
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                    continue
                    
            if df_data:
                df = pd.DataFrame(df_data)
                df.to_csv('signals_hierarchical.csv', index=False)
                logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(df)} –∞–∫—Ç–∏–≤–æ–≤")
                return df
            else:
                logger.warning("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return None
    else:
        logger.info("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return None

async def analyze_altcoin_task(alt_symbol, timeframes, semaphore, btc_context, exchange_sync):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –∞–ª—å—Ç–∫–æ–∏–Ω–∞"""
    if not running:
        return None
        
    alt_usdt = f"{alt_symbol}/USDT"
    logger.info(f"–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ {alt_usdt}...")

    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö OHLCV
    dfs = {}
    ohlcv_tasks = []
    
    for tf_name, tf in timeframes:
        task = fetch_ohlcv_async(alt_usdt, tf, max(20 + 50, 200 + 50), sem=semaphore)
        ohlcv_tasks.append((tf_name, task))

    try:
        ohlcv_results = await asyncio.wait_for(
            asyncio.gather(*[task for _, task in ohlcv_tasks], return_exceptions=True),
            timeout=300.0
        )
    except asyncio.TimeoutError:
        logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö OHLCV –¥–ª—è {alt_symbol}")
        return None
    except asyncio.CancelledError:
        logger.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è {alt_symbol} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö OHLCV –¥–ª—è {alt_symbol}: {e}")
        return None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    valid_dataframes = 0
    for i, (tf_name, _) in enumerate(ohlcv_tasks):
        result = ohlcv_results[i]
        if isinstance(result, Exception):
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {alt_symbol} {tf_name}: {result}")
            continue
        if result is None or len(result) < 10:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {alt_symbol} {tf_name}")
            continue
        dfs[tf_name] = result
        valid_dataframes += 1

    if valid_dataframes == 0:
        logger.warning(f"–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö OHLCV –¥–ª—è {alt_symbol}")
        return None

    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞
    try:
        orderbook = await fetch_orderbook_async(alt_usdt, limit=50)
        if not orderbook:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –¥–ª—è {alt_symbol}")
            orderbook = {}
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è {alt_symbol}: {e}")
        orderbook = {}

    # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    try:
        alt_signal_data = analyze_altcoin_data(alt_symbol, dfs, orderbook, btc_context, exchange_sync)
        
        if alt_signal_data:
            combined_signal = combine_signals(btc_context, alt_signal_data)
            return combined_signal
        else:
            logger.info(f"–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {alt_symbol}")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {alt_symbol}: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return None

# =============== –ó–ê–ü–£–°–ö ===============
if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω–æ–≥–æ –±–æ—Ç–∞ v6 (–∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑)...")
    logger.info(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {MAX_CONCURRENT_REQUESTS}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if TELEGRAM_ENABLED and TELEGRAM_TOKEN and CHAT_ID:
        token_display = TELEGRAM_TOKEN[:10] + "..." if len(TELEGRAM_TOKEN) > 10 else "N/A"
        logger.info(f"‚úÖ Telegram –≤–∫–ª—é—á–µ–Ω. –¢–æ–∫–µ–Ω: {token_display} | Chat ID: {CHAT_ID}")
    else:
        logger.warning("‚ö†Ô∏è  Telegram –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    logger.info("–†–µ–∂–∏–º: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (–∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑)")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while running:
        try:
            logger.info(f"\nüîÑ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            df = asyncio.run(run_triad_scan_async())
            
            if df is not None and len(df) > 0:
                logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(df)} —Å–∏–≥–Ω–∞–ª–æ–≤")
            elif df is not None:
                logger.info("‚ÑπÔ∏è  –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                logger.info("‚ÑπÔ∏è  –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
                
        except KeyboardInterrupt:
            logger.info(f"\n{Colors.SELL}üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.{Colors.RESET}")
            break
        except Exception as e:
            logger.error(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            import traceback
            logger.error(traceback.format_exc())
            
        if not running:
            break
            
        try:
            now = datetime.now().strftime("%H:%M:%S")
            logger.info(f"\n‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç... ({now})")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
            for _ in range(600):  # 10 –º–∏–Ω—É—Ç –ø–æ 1 —Å–µ–∫—É–Ω–¥–µ
                if not running:
                    break
                time.sleep(1)
                
        except KeyboardInterrupt:
            logger.info(f"\n{Colors.SELL}üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.{Colors.RESET}")
            break
    
    logger.info(f"\n{Colors.SELL}üõë –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.{Colors.RESET}")